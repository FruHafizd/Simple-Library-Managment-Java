/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package LibraryManagment.Book;

import LibraryManagment.home.HomeView;
import LibraryManagment.utilities.ConnectionMysql;
import java.awt.Component;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class BookView extends javax.swing.JInternalFrame {
    private Component sv;
    DefaultTableModel tabmode;
    /**
     * Creates new form BookView
     */
    public BookView() {
        initComponents();
        displayData();
        ComboCategory();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        textBookId = new javax.swing.JTextField();
        textTitleBook = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        buttonSimpan = new javax.swing.JButton();
        buttonBatal = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        textSearch = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableBook = new javax.swing.JTable();
        buttonUbah = new javax.swing.JButton();
        buttonHapus = new javax.swing.JButton();
        buttonSegarkan = new javax.swing.JButton();
        buttonTutup = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        textPublisher = new javax.swing.JTextField();
        textWriter = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        ComboCategory = new javax.swing.JComboBox<>();

        jLabel2.setText("Book Id :");

        jLabel3.setText("Title Book : ");

        textBookId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textBookIdActionPerformed(evt);
            }
        });

        textTitleBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textTitleBookActionPerformed(evt);
            }
        });

        jLabel5.setText("Writer : ");

        jLabel7.setText("Publisher : ");

        buttonSimpan.setText("Save");
        buttonSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSimpanActionPerformed(evt);
            }
        });

        buttonBatal.setText("Cancel");
        buttonBatal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBatalActionPerformed(evt);
            }
        });

        jLabel8.setText("Searchi Data : ");

        textSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textSearchActionPerformed(evt);
            }
        });

        tableBook.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableBook.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableBookMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableBook);

        buttonUbah.setText("Change");
        buttonUbah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonUbahActionPerformed(evt);
            }
        });

        buttonHapus.setText("Delete");
        buttonHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonHapusActionPerformed(evt);
            }
        });

        buttonSegarkan.setText("Refersh");
        buttonSegarkan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSegarkanActionPerformed(evt);
            }
        });

        buttonTutup.setText("Close");
        buttonTutup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonTutupActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jLabel1.setText("Books");

        textPublisher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textPublisherActionPerformed(evt);
            }
        });

        jLabel9.setText("Category : ");

        ComboCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ComboCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboCategoryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addComponent(buttonUbah, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonHapus, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonSegarkan, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonTutup, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addComponent(textSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(8, 8, 8)
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(textBookId))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(textWriter))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGap(5, 5, 5)
                                            .addComponent(textTitleBook))))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel9)
                                        .addComponent(jLabel7))
                                    .addGap(5, 5, 5)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(textPublisher)
                                        .addComponent(ComboCategory, 0, 520, Short.MAX_VALUE)))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(buttonSimpan)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(buttonBatal, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(247, 247, 247)
                        .addComponent(jLabel1)))
                .addContainerGap(540, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel1)
                .addGap(44, 44, 44)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(textBookId, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(textTitleBook, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(textWriter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textPublisher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(ComboCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonBatal)
                    .addComponent(buttonSimpan))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonUbah)
                    .addComponent(buttonHapus)
                    .addComponent(buttonSegarkan)
                    .addComponent(buttonTutup))
                .addContainerGap(279, Short.MAX_VALUE))
        );

        jScrollPane3.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 658, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 627, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ComboCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboCategoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboCategoryActionPerformed

    private void textPublisherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textPublisherActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textPublisherActionPerformed

    private void buttonTutupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonTutupActionPerformed
        // TODO add your handling code here:
        try {
            dispose();
            HomeView.menuItemBook.setEnabled(true);
        } catch (Exception error) {
            System.out.println("Error at SiswaController-buttonTutupAction, details : " + error.toString());

        }
    }//GEN-LAST:event_buttonTutupActionPerformed

    private void buttonSegarkanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSegarkanActionPerformed
        // TODO add your handling code here:
        reset();
    }//GEN-LAST:event_buttonSegarkanActionPerformed

    private void buttonHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonHapusActionPerformed
        // TODO add your handling code here:
        int row = tableBook.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(sv, "Please click on the data you want to delete.");
        } else {
            try (Connection connection = ConnectionMysql.getConnection()) {
                String book_id = "";
                book_id = textBookId.getText();
                String sql = "DELETE FROM books WHERE book_id = ?";
                try (PreparedStatement pst = connection.prepareStatement(sql)) {
                    pst.setString(1, book_id);
                    int affectedRows = pst.executeUpdate();
                    if (affectedRows > 0) {
                        JOptionPane.showMessageDialog(null, "Data deleted successfully", "Information", JOptionPane.INFORMATION_MESSAGE);
                        displayData();
                        reset();
                    } else {
                        JOptionPane.showMessageDialog(null, "Data not found or already deleted", "Information", JOptionPane.WARNING_MESSAGE);
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Failed to delete data: " + e.getMessage(), "Information", JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_buttonHapusActionPerformed

    private void buttonUbahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUbahActionPerformed
        // TODO add your handling code here:
       int row = tableBook.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(null, "Please click on the data you want to update.");
        } else {
            try (Connection con1 = ConnectionMysql.getConnection()) {
                // Retrieve category_id based on the selected category
                String sql1 = "SELECT category.category_id, category.name_category FROM category WHERE category.name_category = ?";
                try (PreparedStatement pst1 = con1.prepareStatement(sql1)) {
                    pst1.setString(1, ComboCategory.getSelectedItem().toString());
                    try (ResultSet res1 = pst1.executeQuery()) {
                        if (res1.next()) {
                            String category_id = res1.getString("category_id");

                            // Update data in the books table
                            String sql = "UPDATE books SET title = ?, writer = ?, publisher = ?, category_id = ? WHERE book_id = ?";
                            try (PreparedStatement pst = con1.prepareStatement(sql)) {
                                // Set parameter values
                                pst.setString(1, textTitleBook.getText());
                                pst.setString(2, textWriter.getText());
                                pst.setString(3, textPublisher.getText());
                                pst.setString(4, category_id);
                                pst.setString(5, tableBook.getValueAt(row, 0).toString()); // WHERE book_id = ? based on the selected row

                                // Execute SQL statement to update the book data
                                int rowsAffected = pst.executeUpdate();

                                if (rowsAffected > 0) {
                                    JOptionPane.showMessageDialog(null, "Data updated successfully", "Information", JOptionPane.INFORMATION_MESSAGE);
                                    displayData();
                                    reset();
                                } else {
                                    JOptionPane.showMessageDialog(null, "Failed to update data", "Information", JOptionPane.ERROR_MESSAGE);
                                }
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Category not found", "Information", JOptionPane.WARNING_MESSAGE);
                        }
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Failed to save data: " + e.getMessage(), "Information", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace(); // For debugging
            }
        }

    }//GEN-LAST:event_buttonUbahActionPerformed

    private void tableBookMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableBookMouseClicked
        // TODO add your handling code here:
        int books = tableBook.getSelectedRow();
        textBookId.setText(tableBook.getValueAt(books,0).toString());
        textTitleBook.setText(tableBook.getValueAt(books,1).toString());
        textWriter.setText(tableBook.getValueAt(books,2).toString());
        textPublisher.setText(tableBook.getValueAt(books,3).toString());
        ComboCategory.setSelectedItem(tableBook.getValueAt(books,4).toString());
    }//GEN-LAST:event_tableBookMouseClicked

    private void textSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textSearchActionPerformed
        searchData();
        // TODO add your handling code here:
    }//GEN-LAST:event_textSearchActionPerformed

    private void buttonBatalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBatalActionPerformed
        try {
            reset();
        } catch (Exception error) {
            System.out.println("Error at SiswaController-buttonBatalAction, details : " + error.toString());

        }
    }//GEN-LAST:event_buttonBatalActionPerformed

    private void buttonSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSimpanActionPerformed
       try {
        boolean isValid = validateData();
        if (!isValid) {
            Connection connection = ConnectionMysql.getConnection();
            String sql1 = "SELECT category.category_id, category.name_category FROM category WHERE category.name_category = ?";
            PreparedStatement pst1 = connection.prepareStatement(sql1);
            pst1.setString(1, ComboCategory.getSelectedItem().toString());
            ResultSet res1 = pst1.executeQuery();

            if (res1.next()) {
                String category_id = res1.getString("category_id");

                String sql = "INSERT INTO books (book_id, title, writer, publisher, category_id) VALUES (?, ?, ?, ?, ?)";
                PreparedStatement pst = connection.prepareStatement(sql);

                pst.setString(1, textBookId.getText().trim());
                pst.setString(2, textTitleBook.getText().trim());
                pst.setString(3, textWriter.getText().trim());
                pst.setString(4, textPublisher.getText().trim());
                pst.setString(5, category_id);

                pst.executeUpdate();

                JOptionPane.showMessageDialog(null, "Data saved successfully", "Information", JOptionPane.INFORMATION_MESSAGE);
                displayData();
                reset();
            } else {
                JOptionPane.showMessageDialog(null, "Category not found", "Information", JOptionPane.WARNING_MESSAGE);
            }

            connection.close();
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Failed to save data: " + e.getMessage(), "Information", JOptionPane.ERROR_MESSAGE);
    }

        
    }//GEN-LAST:event_buttonSimpanActionPerformed

    private void textTitleBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textTitleBookActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textTitleBookActionPerformed

    private void textBookIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textBookIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textBookIdActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboCategory;
    public static javax.swing.JButton buttonBatal;
    public static javax.swing.JButton buttonHapus;
    public static javax.swing.JButton buttonSegarkan;
    public static javax.swing.JButton buttonSimpan;
    public static javax.swing.JButton buttonTutup;
    public static javax.swing.JButton buttonUbah;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    public static javax.swing.JTable tableBook;
    public static javax.swing.JTextField textBookId;
    private javax.swing.JTextField textPublisher;
    public static javax.swing.JTextField textSearch;
    public static javax.swing.JTextField textTitleBook;
    private javax.swing.JTextField textWriter;
    // End of variables declaration//GEN-END:variables

    private void reset() {
            textBookId.setText("");
            textTitleBook.setText("");
            textWriter.setText("");
            textPublisher.setText("");
            ComboCategory.setSelectedIndex(0);
    }

    private void displayData() {
        Object[] columns = {"Book ID", "Book Title", "Writer", "Publisher", "Category"};
        tabmode = new DefaultTableModel(null, columns);
        tableBook.setModel(tabmode);

        String sql = "SELECT " +
                         "books.book_id, " +
                         "books.title, " +
                         "books.writer, " +
                         "books.publisher, " +
                         "category.name_category " +  // Ensure this column is selected
                     "FROM " +
                         "books " +
                     "INNER JOIN " +
                         "category ON books.category_id = category.category_id";

        try {
            Connection connection = new ConnectionMysql().getConnection();
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery(sql);

            while (resultSet.next()) {
                String bookId = resultSet.getString("book_id");
                String title = resultSet.getString("title");
                String writer = resultSet.getString("writer");
                String publisher = resultSet.getString("publisher");
                String categoryName = resultSet.getString("name_category");  // Retrieve this column
                String[] rowData = {bookId, title, writer, publisher, categoryName};
                tabmode.addRow(rowData);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "FAILED TO DISPLAY DATA", "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
        }
    }


    private void searchData() {
        String keyword = textSearch.getText();
        // SQL untuk mencari buku berdasarkan book_id, title, writer, atau name_category
        String sql = "SELECT books.book_id, books.title, books.writer, books.publisher, category.name_category "
                   + "FROM books "
                   + "JOIN category ON books.category_id = category.category_id "
                   + "WHERE books.book_id LIKE ? OR books.title LIKE ? OR books.writer LIKE ? OR category.name_category LIKE ?";

        try (Connection konek = ConnectionMysql.getConnection()) {
            PreparedStatement pst = konek.prepareStatement(sql);
            String likeKeyword = "%" + keyword + "%";
            pst.setString(1, likeKeyword);  // Untuk pencarian pada book_id
            pst.setString(2, likeKeyword);  // Untuk pencarian pada title
            pst.setString(3, likeKeyword);  // Untuk pencarian pada writer
            pst.setString(4, likeKeyword);  // Untuk pencarian pada category name

            ResultSet res = pst.executeQuery();
            tabmode.setRowCount(0); // Clear the existing rows

            while (res.next()) {
                String bookId = res.getString("book_id");
                String title = res.getString("title");
                String writer = res.getString("writer");
                String publisher = res.getString("publisher");
                String categoryName = res.getString("name_category");  // Mengambil nama kategori
                String[] data = {bookId, title, writer, publisher, categoryName};
                tabmode.addRow(data);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Gagal mencari data: " + e.getMessage(), "Informasi", JOptionPane.ERROR_MESSAGE);
        }
    }






    
    private boolean validateData() {
        boolean isInvalid = true;
        try {
            if (textBookId.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Book ID cannot be empty.");
            } else if (textTitleBook.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Title cannot be empty.");
            } else if (textWriter.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Writer cannot be empty.");
            } else if (textPublisher.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Publisher cannot be empty.");
            } else if (ComboCategory.getSelectedItem() == null || ComboCategory.getSelectedItem().toString().trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Category cannot be empty.");
            } else {
                isInvalid = false; // All validations passed
            }
        } catch (Exception error) {
            System.out.println("Error in validateData, details: " + error.toString());
            JOptionPane.showMessageDialog(null, "Error in validateData, details: " + error.toString());
        }
        return isInvalid;
    }


  private void ComboCategory() {
    try {
        // Create a connection to the database
        Connection connection = new ConnectionMysql().getConnection();

        // Query to retrieve categories
        String sql = "SELECT name_category FROM category";
        Statement statement = connection.createStatement();
        ResultSet resultSet = statement.executeQuery(sql);

        // Remove all items from the ComboBox
        ComboCategory.removeAllItems();
        ComboCategory.addItem("Choose Category"); // Add a placeholder (optional)

        // Add category names to the ComboBox
        while (resultSet.next()) {
            ComboCategory.addItem(resultSet.getString("name_category"));
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "FAILED TO LOAD: " + e.getMessage(), "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
    }
}


}
