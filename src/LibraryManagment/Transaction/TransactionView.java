/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package LibraryManagment.Transaction;

import LibraryManagment.home.HomeView;
import LibraryManagment.utilities.ConnectionMysql;
import java.awt.Component;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class TransactionView extends javax.swing.JInternalFrame {
    private Component sv;
    DefaultTableModel tabmode;
    /**
     * Creates new form TransactionView
     */
    public TransactionView() {
        initComponents();
        displayData();
        ComboBook();
        ComboBorrow();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        textTransactionId = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        buttonSimpan = new javax.swing.JButton();
        buttonBatal = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        textSearch = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableTransaction = new javax.swing.JTable();
        buttonUbah = new javax.swing.JButton();
        buttonHapus = new javax.swing.JButton();
        buttonSegarkan = new javax.swing.JButton();
        buttonTutup = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        textLoanDate = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        ComboBook = new javax.swing.JComboBox<>();
        ComboBorrower = new javax.swing.JComboBox<>();
        textReturnDate = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();

        jLabel2.setText("Transaction Id :");

        textTransactionId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textTransactionIdActionPerformed(evt);
            }
        });

        jLabel5.setText("Borrower : ");

        jLabel7.setText("Loan Data : ");

        buttonSimpan.setText("Save");
        buttonSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSimpanActionPerformed(evt);
            }
        });

        buttonBatal.setText("Cancel");
        buttonBatal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBatalActionPerformed(evt);
            }
        });

        jLabel8.setText("Searchi Data : ");

        textSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textSearchActionPerformed(evt);
            }
        });

        tableTransaction.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableTransaction.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableTransactionMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableTransaction);

        buttonUbah.setText("Change");
        buttonUbah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonUbahActionPerformed(evt);
            }
        });

        buttonHapus.setText("Delete");
        buttonHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonHapusActionPerformed(evt);
            }
        });

        buttonSegarkan.setText("Refersh");
        buttonSegarkan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSegarkanActionPerformed(evt);
            }
        });

        buttonTutup.setText("Close");
        buttonTutup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonTutupActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jLabel1.setText("Transaction");

        textLoanDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textLoanDateActionPerformed(evt);
            }
        });

        jLabel9.setText("Book  : ");

        ComboBook.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ComboBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBookActionPerformed(evt);
            }
        });

        ComboBorrower.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        textReturnDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textReturnDateActionPerformed(evt);
            }
        });

        jLabel10.setText("Return Date : ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addComponent(buttonUbah, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonHapus, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonSegarkan, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonTutup, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addComponent(textSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane2)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(buttonSimpan)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(buttonBatal, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(8, 8, 8)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGap(0, 0, Short.MAX_VALUE)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                    .addComponent(jLabel2)
                                                    .addGap(18, 18, 18))
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addComponent(jLabel9)
                                                    .addGap(58, 58, 58)))
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(ComboBook, 0, 478, Short.MAX_VALUE)
                                                .addComponent(textTransactionId)))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel5)
                                                .addComponent(jLabel7)
                                                .addComponent(jLabel10))
                                            .addGap(25, 25, 25)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(textReturnDate)
                                                .addComponent(ComboBorrower, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(textLoanDate))))))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(211, 211, 211)
                        .addComponent(jLabel1)))
                .addContainerGap(346, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel1)
                .addGap(42, 42, 42)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(textTransactionId, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(ComboBook, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(ComboBorrower, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(textLoanDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textReturnDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonBatal)
                    .addComponent(buttonSimpan))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonUbah)
                    .addComponent(buttonHapus)
                    .addComponent(buttonSegarkan)
                    .addComponent(buttonTutup))
                .addContainerGap(279, Short.MAX_VALUE))
        );

        jScrollPane3.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 691, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 627, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textTransactionIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textTransactionIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textTransactionIdActionPerformed

    private void buttonSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSimpanActionPerformed
        try {
            boolean b = validateData();
            if (!b) {
                // Establishing a connection to the database
                Connection con1 = ConnectionMysql.getConnection();

                // Query to retrieve book and borrower information based on selection
                String sql1 = "SELECT books.book_id FROM books WHERE books.title = ?";
                String sql2 = "SELECT borrowers.id_borrower FROM borrowers WHERE borrowers.name = ?";

                // Preparing the prepared statements
                PreparedStatement pst1 = con1.prepareStatement(sql1);
                PreparedStatement pst2 = con1.prepareStatement(sql2);

                // Setting the parameter values for book and borrower
                pst1.setString(1, ComboBook.getSelectedItem().toString());
                pst2.setString(1, ComboBorrower.getSelectedItem().toString());

                // Executing the queries
                ResultSet res1 = pst1.executeQuery();
                ResultSet res2 = pst2.executeQuery();

                // Checking if the result for book and borrower exists
                if (res1.next() && res2.next()) {
                    String book_id = res1.getString("book_id");
                    String id_borrower = res2.getString("id_borrower");

                    // Query to save the transaction
                    String sql = "INSERT INTO transaction (id, book_id, id_borrower, borrow_date, return_date) VALUES (?, ?, ?, ?, ?)";
                    PreparedStatement pst = con1.prepareStatement(sql);

                    // Setting the parameters for the transaction
                    pst.setString(1, textTransactionId.getText().trim());
                    pst.setString(2, book_id);
                    pst.setString(3, id_borrower);
                    pst.setString(4, textLoanDate.getText().trim());
                    pst.setString(5, textReturnDate.getText().trim());

                    // Executing the insert statement
                    pst.executeUpdate();

                    // Displaying a success message
                    JOptionPane.showMessageDialog(null, "Data has been successfully saved", "Information", JOptionPane.INFORMATION_MESSAGE);

                    // Displaying data and resetting the form
                    displayData();
                    reset();
                } else {
                    JOptionPane.showMessageDialog(null, "Book or Borrower not found", "Information", JOptionPane.WARNING_MESSAGE);
                }

                // Closing the connection
                con1.close();
            }
        } catch (Exception e) {
            // Displaying an error message if something goes wrong
            JOptionPane.showMessageDialog(null, "Failed to save data: " + e.getMessage(), "Information", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace(); // For debugging purposes
        }



    }//GEN-LAST:event_buttonSimpanActionPerformed

    private void buttonBatalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBatalActionPerformed
        try {
            reset();
        } catch (Exception error) {
            System.out.println("Error at SiswaController-buttonBatalAction, details : " + error.toString());
        }
    }//GEN-LAST:event_buttonBatalActionPerformed

    private void textSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textSearchActionPerformed
        searchData();
        // TODO add your handling code here:
    }//GEN-LAST:event_textSearchActionPerformed

    private void tableTransactionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableTransactionMouseClicked
        // TODO add your handling code here:
        int books = tableTransaction.getSelectedRow();
        textTransactionId.setText(tableTransaction.getValueAt(books,0).toString());
        ComboBook.setSelectedItem(tableTransaction.getValueAt(books,1).toString());
        ComboBorrower.setSelectedItem(tableTransaction.getValueAt(books,2).toString());
        textLoanDate.setText(tableTransaction.getValueAt(books,3).toString());
        textReturnDate.setText(tableTransaction.getValueAt(books,4).toString());
    }//GEN-LAST:event_tableTransactionMouseClicked

    private void buttonUbahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUbahActionPerformed
        int row = tableTransaction.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(null, "Please select the data you want to update");
        } else {
            try (Connection konek = ConnectionMysql.getConnection()) {
                // Get book_id based on the selected book
                String sql1 = "SELECT books.book_id FROM books WHERE books.title = ?";
                try (PreparedStatement pst1 = konek.prepareStatement(sql1)) {
                    pst1.setString(1, ComboBook.getSelectedItem().toString());
                    try (ResultSet res1 = pst1.executeQuery()) {
                        if (res1.next()) {
                            String bookId = res1.getString("book_id");

                            // Get id_borrower based on the selected borrower
                            String sql2 = "SELECT borrowers.id_borrower FROM borrowers WHERE borrowers.name = ?";
                            try (PreparedStatement pst2 = konek.prepareStatement(sql2)) {
                                pst2.setString(1, ComboBorrower.getSelectedItem().toString());
                                try (ResultSet res2 = pst2.executeQuery()) {
                                    if (res2.next()) {
                                        String borrowerId = res2.getString("id_borrower");

                                        // Update data in the transaction table
                                        String sqlUpdate = "UPDATE transaction SET book_id = ?, id_borrower = ?, borrow_date = ?, return_date = ? WHERE id = ?";
                                        try (PreparedStatement pstUpdate = konek.prepareStatement(sqlUpdate)) {
                                            pstUpdate.setString(1, bookId);
                                            pstUpdate.setString(2, borrowerId);
                                            pstUpdate.setString(3, textLoanDate.getText().trim());
                                            pstUpdate.setString(4, textReturnDate.getText().trim());
                                            pstUpdate.setString(5, textTransactionId.getText().trim()); // WHERE id = ?

                                            // Execute the SQL statement to update the data
                                            int rowsAffected = pstUpdate.executeUpdate();

                                            if (rowsAffected > 0) {
                                                JOptionPane.showMessageDialog(null, "Data has been successfully updated", "Information", JOptionPane.INFORMATION_MESSAGE);
                                                displayData();
                                                reset();
                                            } else {
                                                JOptionPane.showMessageDialog(null, "Data update failed", "Information", JOptionPane.ERROR_MESSAGE);
                                            }
                                        }
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Borrower not found", "Information", JOptionPane.WARNING_MESSAGE);
                                    }
                                }
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Book not found", "Information", JOptionPane.WARNING_MESSAGE);
                        }
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Failed to update data: " + e.getMessage(), "Information", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace(); // For debugging purposes
            }
        }
    }//GEN-LAST:event_buttonUbahActionPerformed

    private void buttonHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonHapusActionPerformed
        // TODO add your handling code here:
       int row = tableTransaction.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(null, "Please select the data you want to delete");
        } else {
            try (Connection konek = ConnectionMysql.getConnection()) {
                String transactionId = textTransactionId.getText().trim();
                String sql = "DELETE FROM transaction WHERE id = ?";
                try (PreparedStatement pst = konek.prepareStatement(sql)) {
                    pst.setString(1, transactionId);
                    int affectedRows = pst.executeUpdate();
                    if (affectedRows > 0) {
                        JOptionPane.showMessageDialog(null, "Data has been successfully deleted", "Information", JOptionPane.INFORMATION_MESSAGE);
                        displayData();
                        reset();
                    } else {
                        JOptionPane.showMessageDialog(null, "Data not found or already deleted", "Information", JOptionPane.WARNING_MESSAGE);
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Failed to delete data: " + e.getMessage(), "Information", JOptionPane.ERROR_MESSAGE);
            }
        }


    }//GEN-LAST:event_buttonHapusActionPerformed

    private void buttonSegarkanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSegarkanActionPerformed
        // TODO add your handling code here:
        reset();
    }//GEN-LAST:event_buttonSegarkanActionPerformed

    private void buttonTutupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonTutupActionPerformed
        // TODO add your handling code here:
        try {
            dispose();
            HomeView.menuItemBook.setEnabled(true);
        } catch (Exception error) {
            System.out.println("Error at SiswaController-buttonTutupAction, details : " + error.toString());

        }
    }//GEN-LAST:event_buttonTutupActionPerformed

    private void textLoanDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textLoanDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textLoanDateActionPerformed

    private void ComboBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBookActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboBookActionPerformed

    private void textReturnDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textReturnDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textReturnDateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboBook;
    private javax.swing.JComboBox<String> ComboBorrower;
    public static javax.swing.JButton buttonBatal;
    public static javax.swing.JButton buttonHapus;
    public static javax.swing.JButton buttonSegarkan;
    public static javax.swing.JButton buttonSimpan;
    public static javax.swing.JButton buttonTutup;
    public static javax.swing.JButton buttonUbah;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    public static javax.swing.JTable tableTransaction;
    private javax.swing.JTextField textLoanDate;
    private javax.swing.JTextField textReturnDate;
    public static javax.swing.JTextField textSearch;
    public static javax.swing.JTextField textTransactionId;
    // End of variables declaration//GEN-END:variables

    private boolean validateData() {
        boolean isValid = true;
        try {
            // Validation for Transaction
            if (textTransactionId.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Transaction ID cannot be empty");
            } else if (textLoanDate.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Loan Date cannot be empty");
            } else if (textReturnDate.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Return Date cannot be empty");
            } else if (ComboBook.getSelectedItem() == null || ComboBook.getSelectedItem().toString().trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Book cannot be empty");
            } else if (ComboBorrower.getSelectedItem() == null || ComboBorrower.getSelectedItem().toString().trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Borrower cannot be empty");
            } else {
                isValid = false; // If all validations are passed, set to `false`
            }
        } catch (Exception error) {
            System.out.println("Error at validasiData, details: " + error.toString());
            JOptionPane.showMessageDialog(null, "Error at validasiData, details: " + error.toString());
        }
        return isValid;
    }

    private void displayData() {
         Object[] baris = {"ID Transaction", "Book Title", "Name Borrower", "Loan Date", "Return Date"};
        tabmode = new DefaultTableModel(null, baris);
        tableTransaction.setModel(tabmode);

        String sql = "SELECT " +
                         "transaction.id AS id_transaction, " +
                         "books.title AS book_title, " +
                         "borrowers.name AS borrower_name, " +
                         "transaction.borrow_date, " +
                         "transaction.return_date " +
                     "FROM " +
                         "transaction " +
                     "INNER JOIN " +
                         "books ON transaction.book_id = books.book_id " +
                     "INNER JOIN " +
                         "borrowers ON transaction.id_borrower = borrowers.id_borrower";

        try {
            Connection konek = new ConnectionMysql().getConnection();
            Statement stat = konek.createStatement();
            ResultSet res = stat.executeQuery(sql);

            while (res.next()) {
                String idTransaction = res.getString("id_transaction");
                String bookTitle = res.getString("book_title");
                String borrowerName = res.getString("borrower_name");
                String loanDate = res.getString("borrow_date");
                String returnDate = res.getString("return_date");

                // Sesuaikan data dengan jumlah kolom
                String[] data = {idTransaction, bookTitle, borrowerName, loanDate, returnDate};
                tabmode.addRow(data);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "FAILED TO DISPLAY: " + e.getMessage(), "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
            e.printStackTrace(); // Untuk debugging
}

    }

    private void reset() {
        textTransactionId.setText("");
        textLoanDate.setText("");
        textReturnDate.setText("");
        ComboBook.setSelectedIndex(0); // Reset pilihan ComboBox untuk buku
        ComboBorrower.setSelectedIndex(0); // Reset pilihan ComboBox untuk peminjam

    }

    private void searchData() {
            String keyword = textSearch.getText();
    // SQL untuk mencari transaksi berdasarkan transaction id, book title, borrower name, borrow_date, return_date
    String sql = "SELECT transaction.id, transaction.book_id, transaction.id_borrower, "
               + "transaction.borrow_date, transaction.return_date, "
               + "books.title AS book_title, borrowers.name AS borrower_name "
               + "FROM transaction "
               + "JOIN books ON transaction.book_id = books.book_id "
               + "JOIN borrowers ON transaction.id_borrower = borrowers.id_borrower "
               + "WHERE transaction.id LIKE ? "
               + "OR books.title LIKE ? "
               + "OR borrowers.name LIKE ? "
               + "OR transaction.borrow_date LIKE ? "
               + "OR transaction.return_date LIKE ?";

    try (Connection konek = ConnectionMysql.getConnection()) {
        PreparedStatement pst = konek.prepareStatement(sql);
        String likeKeyword = "%" + keyword + "%";
        pst.setString(1, likeKeyword);  // Pencarian berdasarkan transaction.id
        pst.setString(2, likeKeyword);  // Pencarian berdasarkan book title
        pst.setString(3, likeKeyword);  // Pencarian berdasarkan borrower name
        pst.setString(4, likeKeyword);  // Pencarian berdasarkan borrow_date
        pst.setString(5, likeKeyword);  // Pencarian berdasarkan return_date

        ResultSet res = pst.executeQuery();
        tabmode.setRowCount(0); // Clear the existing rows

        while (res.next()) {
            String transactionId = res.getString("id");
            String bookTitle = res.getString("book_title");
            String borrowerName = res.getString("borrower_name");
            String borrowDate = res.getString("borrow_date");
            String returnDate = res.getString("return_date");

            // Menampilkan data sesuai dengan hasil pencarian
            String[] data = {transactionId, bookTitle, borrowerName, borrowDate, returnDate};
            tabmode.addRow(data);  // Menambahkan data yang relevan ke tabel
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Gagal mencari data: " + e.getMessage(), "Informasi", JOptionPane.ERROR_MESSAGE);
    }
    }

    private void ComboBook() {
        try {
            // Membuat koneksi ke database
            Connection konek = new ConnectionMysql().getConnection();

            // Query untuk mengambil kategori
            String sql = "SELECT title FROM books";
            Statement stat = konek.createStatement();
            ResultSet res = stat.executeQuery(sql);

            // Menghapus semua item dari ComboBox
            ComboBook.removeAllItems();
            ComboBook.addItem("Chose Book"); // Tambahkan placeholder (opsional)

            // Menambahkan nama kategori ke ComboBox
            while (res.next()) {
                ComboBook.addItem(res.getString("title"));
            }

        } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "FAILED TO DISPLAY: " + e.getMessage(), "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void ComboBorrow() {
        try {
            // Membuat koneksi ke database
            Connection konek = new ConnectionMysql().getConnection();

            // Query untuk mengambil kategori
            String sql = "SELECT name FROM borrowers";
            Statement stat = konek.createStatement();
            ResultSet res = stat.executeQuery(sql);

            // Menghapus semua item dari ComboBox
            ComboBorrower.removeAllItems();
            ComboBorrower.addItem("Chose Borrower"); // Tambahkan placeholder (opsional)

            // Menambahkan nama kategori ke ComboBox
            while (res.next()) {
                ComboBorrower.addItem(res.getString("name"));
            }

        } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "FAILED TO DISPLAY: " + e.getMessage(), "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
        }
    }
}
